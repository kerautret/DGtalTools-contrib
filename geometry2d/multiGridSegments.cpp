/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file multiGridSegments.cpp
 * @ingroup geometry3d
 * @author Bertrand Kerautret (\c kerautre@loria.fr )
 * LORIA (CNRS, UMR 7503), University of Lorraine, France
 *
 * @date 2017/04/25
 *
 * Source file of the tool multiGridSegments
 *
 * This file is part of the DGtal library/DGtalTools-contrib Project.
 */

///////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <fstream>


#include "DGtal/base/Common.h"
#include "DGtal/helpers/StdDefs.h"
#include <DGtal/shapes/GaussDigitizer.h>
#include <DGtal/topology/SurfelAdjacency.h>
#include <DGtal/topology/helpers/Surfaces.h>
#include <DGtal/math/Statistic.h>



#include "DGtal/geometry/curves/ArithmeticalDSSComputer.h"
#include "DGtal/geometry/curves/SaturatedSegmentation.h"
#include "DGtal/geometry/curves/estimation/LambdaMST2D.h"



#include <boost/program_options/options_description.hpp>
#include <boost/program_options/parsers.hpp>
#include <boost/program_options/variables_map.hpp>
#include <DGtal/shapes/parametric/Flower2D.h>
#include <DGtal/shapes/parametric/Ball2D.h>
#include <DGtal/shapes/implicit/ImplicitHyperCube.h>



///////////////////////////////////////////////////////////////////////////////
using namespace std;
using namespace DGtal;
///////////////////////////////////////////////////////////////////////////////
namespace po = boost::program_options;




/**
 @page multiGridSegments multiGridSegments
 
 @brief  Description of the tool...

 @b Usage:   multiGridSegments [input]

 @b Allowed @b options @b are :
 
 @code
  -h [ --help ]           display this message
  -i [ --input ] arg      an input file... 
  -p [ --parameter] arg   a double parameter...
 @endcode

 @b Example: 

 @code
   	multiGridSegments -i  $DGtal/examples/samples/....
 @endcode

 @image html resmultiGridSegments.png "Example of result. "

 @see
 @ref multiGridSegments.cpp

 */




int main( int argc, char** argv )
{
  // parse command line -------------------------------------------------------
  po::options_description general_opt("Allowed options are");
  general_opt.add_options()
    ("help,h", "display this message")
    ("input,i", po::value<std::string >(), "an input file... " )
    ("output,o", po::value<std::string >(), "an output file... " )
    ("gridSizeBegin,b", po::value<double>()->default_value(1.0), "scale to start the analyse (grid size = 1/scale" )
    ("gridSizeEnd,e", po::value<double>()->default_value(100), "the maximal grid size of analyse" )
    ("gridSizeStep,s", po::value<double>()->default_value(1), "the grid size step." )
    ("parameter,p", po::value<double>()->default_value(1.0), "a double parameter... " );

  bool parseOK=true;
  po::variables_map vm;
  try
    {
      po::store(po::parse_command_line(argc, argv, general_opt), vm);
    }
  catch(const std::exception& ex)
    {
      parseOK=false;
      trace.info()<< "Error checking program options: "<< ex.what()<< endl;
    }
  

  // check if min arguments are given and tools description ------------------
  po::notify(vm);
  if( !parseOK || vm.count("help")||argc<=1)
    {
      std::cout << "Usage: " << argv[0] << " [input]\n"
                << "The tools description... \n"
                << general_opt << "\n"
                << "Typical use example:\n \t multiGridSegments -i ... \n";
      return 0;
    }  
  if(! vm.count("input"))
    {
      trace.error() << " The file name was not defined" << endl;
      return 1;
    }



  //  recover the  args ----------------------------------------------------
  string inputFileName = vm["input"].as<string>();
  string outputFileName = vm["output"].as<string>();
  double gridSizeBegin =  vm["gridSizeBegin"].as<double>();
  double gridSizeEnd =  vm["gridSizeEnd"].as<double>();
  double gridSizeStep =  vm["gridSizeStep"].as<double>();
  
  ofstream fout;
  fout.open(outputFileName.c_str(), ofstream::out|ofstream::binary);
  fout<< "# multi grids segments statistics generated by multiGridSegments"<< std::endl;  
  fout << "# from grids: " << gridSizeBegin << " to " << gridSizeEnd << "with step: "  << gridSizeStep << std::endl;
  fout << "# Format: h length_min length_max length_mean length_variance (length : nb steps)" << std::endl;

    
  // Generate the shape at a given grid size.
  double h = 0.1;
  // typedef Flower2D<Z2i::Space> Flower; 
  //Flower2D<Z2i::Space> flower(Z2i::Point(0,0), 20, 5, 5, 0);
  //Ball2D<Z2i::Space> ball(Z2i::Point(0,0), 10.0);


  typedef vector < Z2i::Point > Container;
  typedef Container::const_iterator ConstIterator;
  typedef ArithmeticalDSSComputer < ConstIterator, int, 4 > SegmentComputer;
  typedef SaturatedSegmentation<SegmentComputer> Segmentation;
  
  

  unsigned int nbIt =  (abs(gridSizeEnd-gridSizeBegin))/gridSizeStep;
  //GaussDigitizer<Z2i::Space,ImplicitHyperCube<Z2i::Space> > dig;  
  //ImplicitHyperCube<Z2i::Space> ball(Z2i::Point(0,0), 10.0);
  GaussDigitizer<Z2i::Space,Ball2D<Z2i::Space> > dig;  
  Ball2D<Z2i::Space> ball(Z2i::Point(0,0), 10.0);
  
  for(double h = gridSizeBegin; h < gridSizeEnd; h += gridSizeStep)
    {
      trace.progressBar(h, gridSizeEnd);
      
      dig.attach( ball );
      dig.init( ball.getLowerBound()+Z2i::Vector(-1,-1),
                ball.getUpperBound()+Z2i::Vector(1,1), 1.0/h ); 
  

      // Track grid curve  
      Z2i::KSpace ks;
      ks.init( dig.getLowerBound(), dig.getUpperBound(), true );
      //adjacency (4-connectivity)
      SurfelAdjacency<2> sAdj( true );

      //searching for one boundary element
      Z2i::SCell bel = Surfaces<Z2i::KSpace>::findABel( ks, dig, 1000 );
      //tracking
      std::vector<Z2i::Point> boundaryPoints;
      Surfaces<Z2i::KSpace>::track2DBoundaryPoints( boundaryPoints, ks, sAdj, dig, bel );
      
  
      //Compute tangential cover:
      SegmentComputer segComp;
      Segmentation theSegmentation (boundaryPoints.begin(), boundaryPoints.end(), segComp);
      Segmentation::SegmentComputerIterator it = theSegmentation.begin();
      Segmentation::SegmentComputerIterator end = theSegmentation.end();
      Statistic<double> stats;
      
      for ( ; it != end; ++it) {
        SegmentComputer current(*it);
        stats.addValue(std::distance(it.begin(), it.end()));
      }
      stats.terminate();;
      fout <<  1.0/h << " " << stats.min() << " " << stats.mean() << " " <<  stats.max() << " " << stats.variance() << std::endl;
      
    }
  
  // Some nice processing  --------------------------------------------------
  
  

  fout.close();

  return 0;
}

